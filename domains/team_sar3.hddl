(define (domain teamSAR)
  (:types
    human location block - object
    rescuer victim - human
    medic engineer transporter - rescuer
  )

  (:predicates
    (at ?p - human ?l - location)
    (adj ?l1 ?l2 - location)
    (holds ?p - rescuer ?v - victim)
    (holding_vic ?p - rescuer)
    (stabilized ?v - victim)
    (awake_crit ?v - victim)
    (broke_block ?l - location)
    (broke_more_blocks ?l - location)
    (zone_a ?l - location)
    (zone_b ?l - location)
    (zone_c ?l - location)
    (rescue_a ?v - victim)
    (rescue_b ?v - victim)
    (rescue_c ?v - victim)
    (knowledge_of_s_vic ?p - rescuer ?v - victim ?l - location)
    (knowledge_of_type_a ?p - rescuer ?v - victim ?l - location)
    (knowledge_of_type_b ?p - rescuer ?v - victim ?l - location)
    (knowledge_of_type_c ?p - rescuer ?v - victim ?l - location)
    (h_knowledge_of_s_vic ?p - rescuer ?v - victim)
    (h_knowledge_of_type_a ?p - rescuer ?v - victim)
    (h_knowledge_of_type_b ?p - rescuer ?v - victim)
    (h_knowledge_of_type_c ?p - rescuer ?v - victim)
    (has_sensor_for ?l ?s_l - location)
    (knowledge_of_regs ?p - rescuer ?l - location)
    (knowledge_of_crit ?p - rescuer ?l - location)
    (knowledge_of_empty_room ?p - rescuer ?l -location)
    (location_marker_A ?p - rescuer ?l1 ?l2 - location)
    (location_marker_B ?p - rescuer ?l1 ?l2 - location)
    (location_marker_NVH ?p - rescuer ?l1 ?l2 - location)
    (location_marker_CV ?p - rescuer ?l1 ?l2 - location)
    (location_marker_RV ?p - rescuer ?l1 ?l2 - location)
    (location_marker_TR ?p - rescuer ?l1 ?l2 - location)
    (location_marker_R ?p - rescuer ?l1 ?l2 - location)
    (location_marker_HMH ?p - rescuer ?l1 ?l2 - location)
    (victim_marker_A ?p - rescuer ?l - location ?v - victim)
    (victim_marker_B ?p - rescuer ?l - location ?v - victim)
    (victim_marker_NVH ?p - rescuer ?l - location ?v - victim)
    (victim_marker_CV ?p - rescuer ?l - location ?v - victim)
    (victim_marker_RV ?p - rescuer ?l - location ?v - victim)
    (victim_marker_TR ?p - rescuer ?l - location ?v - victim)
    (victim_marker_R ?p - rescuer ?l - location ?v - victim)
    (victim_marker_HMH ?p - rescuer ?l - location ?v - victim)
    (can_see_reg_vic ?p - rescuer);start f-predicates 
    (can_diagnose_vic ?m - medic ?v - victim)
    (can_see_crit_vic ?p - rescuer)
    (can_stabilize_vic ?m - medic ?v - victim)
    (can_wake_vic ?m - medic ?t - rescuer ?v - victim)
    (can_pickup_vic ?p - rescuer ?v - victim)
    (can_break_block ?e - engineer)
    (blocked_from ?l1 ?l2 - location)
    (type_a ?v - victim)
    (type_b ?v - victim)
    (type_c ?v - victim)
    (sense_regs ?l - location)
    (sense_crit ?l - location)
    (sense_nothing ?l - location)
    (marked_location_A ?p - rescuer ?l1 ?l2 - location)
    (marked_location_B ?p - rescuer ?l1 ?l2 - location)
    (marked_location_NVH ?p - rescuer ?l1 ?l2 - location)
    (marked_location_CV ?p - rescuer ?l1 ?l2 - location)
    (marked_location_RV ?p - rescuer ?l1 ?l2 - location)
    (marked_location_TR ?p - rescuer ?l1 ?l2 - location)
    (marked_location_R ?p - rescuer ?l1 ?l2 - location)
    (marked_location_HMH ?p - rescuer ?l1 ?l2 - location)
    (marked_victim_A ?p - rescuer ?l - location ?v - victim)
    (marked_victim_B ?p - rescuer ?l - location ?v - victim)
    (marked_victim_NVH ?p - rescuer ?l - location ?v - victim)
    (marked_victim_CV ?p - rescuer ?l - location ?v - victim)
    (marked_victim_RV ?p - rescuer ?l - location ?v - victim)
    (marked_victim_TR ?p - rescuer ?l - location ?v - victim)
    (marked_victim_R ?p - rescuer ?l - location ?v - victim)
    (marked_victim_HMH ?p - rescuer ?l - location ?v - victim)
    (remove_location_A ?p - rescuer ?l1 ?l2 - location)
    (remove_location_B ?p - rescuer ?l1 ?l2 - location)
    (remove_location_NVH ?p - rescuer ?l1 ?l2 - location)
    (remove_location_CV ?p - rescuer ?l1 ?l2 - location)
    (remove_location_RV ?p - rescuer ?l1 ?l2 - location)
    (remove_location_TR ?p - rescuer ?l1 ?l2 - location)
    (remove_location_R ?p - rescuer ?l1 ?l2 - location)
    (remove_location_HMH ?p - rescuer ?l1 ?l2 - location)
    (remove_victim_A ?p - rescuer ?l - location ?v - victim)
    (remove_victim_B ?p - rescuer ?l - location ?v - victim)
    (remove_victim_NVH ?p - rescuer ?l - location ?v - victim)
    (remove_victim_CV ?p - rescuer ?l - location ?v - victim)
    (remove_victim_RV ?p - rescuer ?l - location ?v - victim)
    (remove_victim_TR ?p - rescuer ?l - location ?v - victim)
    (remove_victim_R ?p - rescuer ?l - location ?v - victim)
    (remove_victim_HMH ?p - rescuer ?l - location ?v - victim)
  )

  (:task move_to
    :parameters (?h - rescuer ?l - location)
  )

  (:task move_together_pair
    :parameters (?t1 ?t2 - rescuer ?l - location)
  )

  (:task move_together_all
    :parameters (?t1 ?t2 ?t3 - rescuer ?l - location)
  )

  (:task meet_pair
    :parameters (?t1 ?t2 - rescuer ?l - location)
  )

  (:task meet_all
    :parameters (?t1 ?t2 ?t3 - rescuer ?l - location)
  )

  (:method m_move_to_0
    :parameters (?h - rescuer ?old_l ?new_l - location)
    :task (move_to ?h ?new_l)
    :precondition (and 
                    (at ?h ?old_l)
                    (adj ?old_l ?new_l)
                    (not (blocked_from ?new_l ?old_l))
                  )
    :subtasks (and
                (task0 (move ?h ?old_l ?new_l))
              )
  )

  (:method m_move_to_1
    :parameters (?h - rescuer ?old_l ?new_l sub_l - location)
    :task (move_to ?h ?new_l)
    :precondition (and 
                    (at ?h ?old_l)
                    (adj ?new_l sub_l)
                    (or 
                      (not (adj ?old_l ?new_l))
                      (blocked_from ?new_l ?old_l)
                    )
                  )
    :subtasks (and
                (task0 (move_to ?h ?sub_l))
                (task1 (move_to ?h ?new_l))
              )
    :ordering (and
                (< task0 task1)
              )
  )

  (:method move_together_pair_0
    :parameters (?t1 ?t2 - rescuer ?old_l ?new_l - location)
    :task (move_together_pair ?t1 ?t2 ?new_l)
    :precondition (and 
                    (at ?t1 ?old_l)
                    (at ?t2 ?old_l)
                    (not (= ?t1 ?t2))
                    (adj ?old_l ?new_l)
                    (not (blocked_from ?new_l ?old_l))
                  )
    :subtasks (and
                (task0 (move ?t1 ?old_l ?new_l))
                (task1 (move ?t2 ?old_l ?new_l))
              )
  )

  (:method move_together_pair_1
    :parameters (?t1 ?t2 - rescuer ?old_l ?new_l ?sub_l - location)
    :task (move_together_pair ?t1 ?t2 ?new_l)
    :precondition (and 
                    (at ?t1 ?old_l)
                    (at ?t2 ?old_l)
                    (not (= ?t1 ?t2))
                    (adj ?old_l ?sub_l)
                    (or
                      (not (adj ?old_l ?new_l))
                      (blocked_from ?new_l ?old_l)
                    )
                  )
    :subtasks (and
                (task0 (move_together_pair ?t1 ?t2 ?sub_l))
                (task1 (move_together_pair ?t1 ?t2 ?new_l))
              )
    :ordering (and
                (< task0 task1)
              )
  )

  (:method move_together_all_0
    :parameters (?t1 ?t2 ?t3 - rescuer ?old_l ?new_l - location)
    :task (move_together_all ?t1 ?t2 ?t3 ?new_l)
    :precondition (and 
                    (at ?t1 ?old_l)
                    (at ?t2 ?old_l)
                    (at ?t3 ?old_l)
                    (not (= ?t1 ?t2))
                    (not (= ?t2 ?t3))
                    (not (= ?t1 ?t3))
                    (adj ?old_l ?new_l)
                    (not (blocked_from ?new_l ?old_l))
                  )
    :subtasks (and
                (task0 (move ?t1 ?old_l ?new_l))
                (task1 (move ?t2 ?old_l ?new_l))
                (task2 (move ?t3 ?old_l ?new_l))
              )
  )

  (:method move_together_all_1
    :parameters (?t1 ?t2 ?t3 - rescuer ?old_l ?new_l ?sub_l - location)
    :task (move_together_all ?t1 ?t2 ?t3 ?new_l)
    :precondition (and 
                    (at ?t1 ?old_l)
                    (at ?t2 ?old_l)
                    (at ?t3 ?old_l)
                    (not (= ?t1 ?t2))
                    (not (= ?t2 ?t3))
                    (not (= ?t1 ?t3))
                    (adj ?old_l ?sub_l)
                    (or
                      (not (adj ?old_l ?new_l))
                      (blocked_from ?new_l ?old_l)
                    )
                  )
    :subtasks (and
                (task0 (move_together_all ?t1 ?t2 ?t3 ?sub_l))
                (task1 (move_together_all ?t1 ?t2 ?t3 ?new_l))
              )
    :ordering (and
                (< task0 task1)
              )
  )

  (:method meet_pair_0
    :parameters (?t1 ?t2 - rescuer ?old_l1 ?old_l2 ?new_l - location)
    :task (meet_pair ?t1 ?t2 ?new_l)
    :precondition (and 
                    (at ?t1 ?old_l1)
                    (at ?t2 ?old_l2)
                    (not (= ?t1 ?t2))
                    (not (= ?old_l1 ?new_l))
                    (not (= ?old_l2 ?new_l))
                  )
    :subtasks (and
                (task0 (move_to ?t1 ?new_l))
                (task1 (move_to ?t2 ?new_l))
              )
  )

  (:method meet_pair_1
    :parameters (?t1 ?t2 - rescuer ?old_l1 ?old_l2 ?new_l - location)
    :task (meet_pair ?t1 ?t2 ?new_l)
    :precondition (and 
                    (at ?t1 ?old_l1)
                    (at ?t2 ?old_l2)
                    (not (= ?t1 ?t2))
                    (= ?old_l1 ?new_l)
                  )
    :subtasks (and
                (task0 (move_to ?t2 ?new_l))
              )
  )

  (:method meet_all_0
    :parameters (?t1 ?t2 ?t3 - rescuer ?old_l1 ?old_l2 ?old_l3 ?new_l - location)
    :task (meet_all ?t1 ?t2 ?t3 ?new_l)
    :precondition (and 
                    (at ?t1 ?old_l1)
                    (at ?t2 ?old_l2)
                    (at ?t3 ?old_l3)
                    (not (= ?t1 ?t2))
                    (not (= ?t2 ?t3))
                    (not (= ?t1 ?t3))
                    (not (= ?old_l1 ?new_l))
                    (not (= ?old_l2 ?new_l))
                    (not (= ?old_l3 ?new_l))
                  )
    :subtasks (and
                (task0 (move_to ?t1 ?new_l))
                (task1 (move_to ?t2 ?new_l))
                (task2 (move_to ?t3 ?new_l))
              )
  )

  (:method meet_all_1
    :parameters (?t1 ?t2 ?t3 - rescuer ?old_l1 ?old_l2 ?old_l3 ?new_l - location)
    :task (meet_all ?t1 ?t2 ?t3 ?new_l)
    :precondition (and 
                    (at ?t1 ?old_l1)
                    (at ?t2 ?old_l2)
                    (at ?t3 ?old_l3)
                    (not (= ?t1 ?t2))
                    (not (= ?t2 ?t3))
                    (not (= ?t1 ?t3))
                    (= ?old_l1 ?new_l)
                  )
    :subtasks (and
                (task0 (move_to ?t2 ?new_l))
                (task1 (move_to ?t3 ?new_l))
              )
  )

  (:method meet_all_2
    :parameters (?t1 ?t2 ?t3 - rescuer ?old_l1 ?old_l2 ?old_l3 ?new_l - location)
    :task (meet_all ?t1 ?t2 ?t3 ?new_l)
    :precondition (and 
                    (at ?t1 ?old_l1)
                    (at ?t2 ?old_l2)
                    (at ?t3 ?old_l3)
                    (not (= ?t1 ?t2))
                    (not (= ?t2 ?t3))
                    (not (= ?t1 ?t3))
                    (= ?old_l1 ?new_l)
                    (= ?old_l2 ?new_l)
                  )
    :subtasks (and
                (task0 (move_to ?t3 ?new_l))
              )
  )

  (:action stabilize
    :parameters (?m - medic ?v - victim ?l - location)
    :precondition (and
                    (at ?m ?l)
                    (not (stabilized ?v))
                  )
    :effect (and
              (stabilized ?v)
              (when (not (at ?v ?l)) (at ?v ?l))
              (knowledge_of_s_vic ?m ?v ?l)
            )
  )

  (:action wake_crit
    :parameters (?m - medic ?t - rescuer ?v - victim ?l - location)
    :precondition (and
                    (at ?m ?l)
                    (at ?t ?l)
                    (not (awake_crit ?v))
                  )
    :effect (and
              (awake_crit ?v)
              (when (not (at ?v ?l)) (at ?v ?l))
              (knowledge_of_type_c ?m ?v ?l)
              (knowledge_of_type_c ?t ?v ?l)
            )
  )

  (:action move
    :parameters (?h - rescuer ?old_l ?new_l - location)
    :precondition (and
                    (at ?h ?old_l) 
                    (adj ?old_l ?new_l)
                  )
    :effect (and
              (not (at ?h ?old_l))
              (at ?h ?new_l)
            )
  )

  (:action break_block
    :parameters (?e - engineer ?l - location)
    :precondition (and
                    (at ?e ?l)
                  )
    :effect (and
              (broke_block ?l)
              (when (broke_block ?l) broke_more_blocks ?l)
            )
  )

  (:action pickup_vic
    :parameters (?h - rescuer ?v - victim ?l - location)
    :precondition (and
                    (at ?h ?l)
                    (imply (awake_crit ?v) (stabilized ?v))
                    (not (holding_vic ?h))
                  )
    :effect (and
              (holding_vic ?h)
              (holds ?h ?v)
              (when (at ?v ?l) (not (at ?v ?l)))
              (when (knowledge_of_s_vic ?h ?v ?l) (and 
                                                    (not (knowledge_of_s_vic ?h ?v ?l))
                                                    (h_knowledge_of_s_vic ?h ?v)
                                                  )
              )
              (when (knowledge_of_type_a ?h ?v ?l) (and 
                                                    (not (knowledge_of_type_a ?h ?v ?l))
                                                    (h_knowledge_of_type_a ?h ?v)
                                                  )
              )
              (when (knowledge_of_type_b ?h ?v ?l) (and 
                                                    (not (knowledge_of_type_b ?h ?v ?l))
                                                    (h_knowledge_of_type_b ?h ?v)
                                                  )
              )
              (when (knowledge_of_type_c ?h ?v ?l) (and 
                                                    (not (knowledge_of_type_c ?h ?v ?l))
                                                    (h_knowledge_of_type_c ?h ?v)
                                                  )
              )
            ) 
  )

  (:action put_down_vic
    :parameters (?h - rescuer ?v - victim ?l - location)
    :precondition (and
                    (at ?h ?l)
                    (holding_vic ?h)
                    (holds ?h ?v)
                  )
    :effect (and
              (not (holding_vic ?h))
              (not (holds ?h ?v))
              (at ?v ?l)
              (when (h_knowledge_of_s_vic ?h ?v) (knowledge_of_s_vic ?h ?v ?l))
              (when (h_knowledge_of_type_a ?h ?v) (knowledge_of_type_a ?h ?v ?l))
              (when (h_knowledge_of_type_b ?h ?v) (knowledge_of_type_b ?h ?v ?l))
              (when (h_knowledge_of_type_c ?h ?v) (knowledge_of_type_c ?h ?v ?l))
            )
  )

  (:action rescue_vic
    :parameters (?h - rescuer ?v - victim ?l - location)
    :precondition (and
                    (at ?h ?l)
                    (holding_vic ?h)
                    (holds ?h ?v)
                    (or 
                      (zone_a ?l)
                      (zone_b ?l)
                      (zone_c ?l)
                    )
                  )
    :effect (and
              (when (and (type_a ?v) (zone_a ?l)) (rescue_a ?v))
              (when (and (type_b ?v) (zone_b ?l)) (rescue_b ?v))
              (when (and (type_c ?v) (zone_c ?l)) (rescue_c ?v))
            )
  )

  (:action diagnose_vic
    :parameters (?m - medic ?v - victim ?l - location)
    :precondition (and
                    (at ?m ?l)
                  )
    :effect (and
              (when (type_a ?v) (knowledge_of_type_a ?m ?v))
              (when (type_b ?v) (knowledge_of_type_b ?m ?v))
              (when (type_c ?v) (knowledge_of_type_c ?m ?v))
            )
  )

  (:action detect_vics
    :parameters (?t - transporter ?l ?s_l - location)
    :preconditions (and
                     (at ?t ?l)
                     (has_sensor_for ?l ?s_l)
                   )
    :effect (and
              (when (sense_regs ?s_l) (knowledge_of_regs ?t ?s_l)) 
              (when (sense_crit ?s_l) (knowledge_of_crit ?t ?s_l))
              (when (sense_nothing ?s_l) (knowledge_of_empty_room ?t ?s_l))
            )
  )

  (:action mark_location
    :parameters (?h - rescuer ?l1 ?l2 - location)
    :preconditions (at ?h ?l)
    :effect (and
              (when (marked_location_A ?h ?l1 ?l2) (location_marker_A ?h ?l1 ?l2))
              (when (marked_location_B ?h ?l1 ?l2) (location_marker_B ?h ?l1 ?l2))
              (when (marked_location_NVH ?h ?l1 ?l2) (location_marker_NVH ?h ?l1 ?l2))
              (when (marked_location_CV ?h ?l1 ?l2) (location_marker_CV ?h ?l1 ?l2))
              (when (marked_location_RV ?h ?l1 ?l2) (location_marker_RV ?h ?l1 ?l2))
              (when (marked_location_TR ?h ?l1 ?l2) (location_marker_TR ?h ?l1 ?l2))
              (when (marked_location_R ?h ?l1 ?l2) (location_marker_R ?h ?l1 ?l2))
              (when (marked_location_HMH ?h ?l1 ?l2) (location_marker_HMH ?h ?l1 ?l2))
            )
  )

  (:action remove_location_marker
    :parameters (?h - rescuer ?l1 ?l2 - location)
    :preconditions (at ?h ?l)
    :effect (and
              (when (remove_location_A ?h ?l1 ?l2) (not (location_marker_A ?h ?l1 ?l2)))
              (when (remove_location_B ?h ?l1 ?l2) (not (location_marker_B ?h ?l1 ?l2)))
              (when (remove_location_NVH ?h ?l1 ?l2) (not (location_marker_NVH ?h ?l1 ?l2)))
              (when (remove_location_CV ?h ?l1 ?l2) (not (location_marker_CV ?h ?l1 ?l2)))
              (when (remove_location_RV ?h ?l1 ?l2) (not (location_marker_RV ?h ?l1 ?l2)))
              (when (remove_location_TR ?h ?l1 ?l2) (not (location_marker_TR ?h ?l1 ?l2)))
              (when (remove_location_R ?h ?l1 ?l2) (not (location_marker_R ?h ?l1 ?l2)))
              (when (remove_location_HMH ?h ?l1 ?l2) (not (location_marker_HMH ?h ?l1 ?l2)))
            )
  )

  (:action mark_victim
    :parameters (?h - rescuer ?l - location ?v - victim)
    :preconditions (at ?h ?l)
    :effect (and
              (when (marked_victim_A ?h ?l ?v) (victim_marker_A ?h ?l ?v))
              (when (marked_victim_B ?h ?l ?v) (victim_marker_B ?h ?l ?v))
              (when (marked_victim_NVH ?h ?l ?v) (victim_marker_NVH ?h ?l ?v))
              (when (marked_victim_CV ?h ?l ?v) (victim_marker_CV ?h ?l ?v))
              (when (marked_victim_RV ?h ?l ?v) (victim_marker_RV ?h ?l ?v))
              (when (marked_victim_TR ?h ?l ?v) (victim_marker_TR ?h ?l ?v))
              (when (marked_victim_R ?h ?l ?v) (victim_marker_R ?h ?l ?v))
              (when (marked_victim_HMH ?h ?l ?v) (victim_marker_HMH ?h ?l ?v))
            )
  )

  (:action remove_victim_marker
    :parameters (?h - rescuer ?l - location ?v - victim)
    :preconditions (at ?h ?l)
    :effect (and
              (when (remove_victim_A ?h ?l ?v) (not (victim_marker_A ?h ?l ?v)))
              (when (remove_victim_B ?h ?l ?v) (not (victim_marker_B ?h ?l ?v)))
              (when (remove_victim_NVH ?h ?l ?v) (not (victim_marker_NVH ?h ?l ?v)))
              (when (remove_victim_CV ?h ?l ?v) (not (victim_marker_CV ?h ?l ?v)))
              (when (remove_victim_RV ?h ?l ?v) (not (victim_marker_RV ?h ?l ?v)))
              (when (remove_victim_TR ?h ?l ?v) (not (victim_marker_TR ?h ?l ?v)))
              (when (remove_victim_R ?h ?l ?v) (not (victim_marker_R ?h ?l ?v)))
              (when (remove_victim_HMH ?h ?l ?v) (not (victim_marker_HMH ?h ?l ?v)))
            )
  )

  (:action replace_mark_location
    :parameters (?h ?t - rescuer ?l1 ?l2 - location)
    :preconditions (at ?h ?l1)
    :effect (and
              (when (marked_location_A ?h ?l1 ?l2) (location_marker_A ?h ?l1 ?l2))
              (when (marked_location_B ?h ?l1 ?l2) (location_marker_B ?h ?l1 ?l2))
              (when (marked_location_NVH ?h ?l1 ?l2) (location_marker_NVH ?h ?l1 ?l2))
              (when (marked_location_CV ?h ?l1 ?l2) (location_marker_CV ?h ?l1 ?l2))
              (when (marked_location_RV ?h ?l1 ?l2) (location_marker_RV ?h ?l1 ?l2))
              (when (marked_location_TR ?h ?l1 ?l2) (location_marker_TR ?h ?l1 ?l2))
              (when (marked_location_R ?h ?l1 ?l2) (location_marker_R ?h ?l1 ?l2))
              (when (marked_location_HMH ?h ?l1 ?l2) (location_marker_HMH ?h ?l1 ?l2))
              (when (remove_location_A ?t ?l1 ?l2) (not (location_marker_A ?t ?l1 ?l2)))
              (when (remove_location_B ?t ?l1 ?l2) (not (location_marker_B ?t ?l1 ?l2)))
              (when (remove_location_NVH ?t ?l1 ?l2) (not (location_marker_NVH ?t ?l1 ?l2)))
              (when (remove_location_CV ?t ?l1 ?l2) (not (location_marker_CV ?t ?l1 ?l2)))
              (when (remove_location_RV ?t ?l1 ?l2) (not (location_marker_RV ?t ?l1 ?l2)))
              (when (remove_location_TR ?t ?l1 ?l2) (not (location_marker_TR ?t ?l1 ?l2)))
              (when (remove_location_R ?t ?l1 ?l2) (not (location_marker_R ?t ?l1 ?l2)))
              (when (remove_location_HMH ?t ?l1 ?l2) (not (location_marker_HMH ?t ?l1 ?l2)))
            )
  )

  (:action replace_mark_victim
    :parameters (?h ?t - rescuer ?l - location ?v - victim)
    :preconditions (at ?h ?l)
    :effect (and
              (when (marked_victim_A ?h ?l ?v) (victim_marker_A ?h ?l ?v))
              (when (marked_victim_B ?h ?l ?v) (victim_marker_B ?h ?l ?v))
              (when (marked_victim_NVH ?h ?l ?v) (victim_marker_NVH ?h ?l ?v))
              (when (marked_victim_CV ?h ?l ?v) (victim_marker_CV ?h ?l ?v))
              (when (marked_victim_RV ?h ?l ?v) (victim_marker_RV ?h ?l ?v))
              (when (marked_victim_TR ?h ?l ?v) (victim_marker_TR ?h ?l ?v))
              (when (marked_victim_R ?h ?l ?v) (victim_marker_R ?h ?l ?v))
              (when (marked_victim_HMH ?h ?l ?v) (victim_marker_HMH ?h ?l ?v))
              (when (remove_victim_A ?t ?l ?v) (not (victim_marker_A ?t ?l ?v)))
              (when (remove_victim_B ?t ?l ?v) (not (victim_marker_B ?t ?l ?v)))
              (when (remove_victim_NVH ?t ?l ?v) (not (victim_marker_NVH ?t ?l ?v)))
              (when (remove_victim_CV ?t ?l ?v) (not (victim_marker_CV ?t ?l ?v)))
              (when (remove_victim_RV ?t ?l ?v) (not (victim_marker_RV ?t ?l ?v)))
              (when (remove_victim_TR ?t ?l ?v) (not (victim_marker_TR ?t ?l ?v)))
              (when (remove_victim_R ?t ?l ?v) (not (victim_marker_R ?t ?l ?v)))
              (when (remove_victim_HMH ?t ?l ?v) (not (victim_marker_HMH ?t ?l ?v)))
            )
  )

)
