; 18 Nov: new hddl based on events from message bus that can later be integrated 
        ; with dialog acts and dialog tasks

(define (domain dom_actionEvents)
        (:requirements :negative-preconditions :typing :hierarchy)
        (:types
                victim - object
                location - object
                start - location
                dest - location
                sickbay - location
                player - object
                rubble - object
        )

        (:predicates
                (rescued ?arg0 - victim)
                (can_be_carried ?arg0 - victim)
                (healed ?arg0 - victim)
                (critical ?arg0 - victim)
                (marked ?arg0 - victim)
                (blocked ?arg0 - dest)
                (flagged ?arg0 - dest)
                (in ?arg0 - victim ?arg1 - dest)
                (at ?arg0 - player ?arg1 - start)
                (free ?arg0 - player)
                (present ?arg0 - rubble ?arg1 - dest)
        )

        (:task clearing_room
                :parameters (?p2 - player
                             ?rocks - rubble
                             ?room - dest)
        )

        (:task collaborate_carry_stabilized
                :parameters (?p1 - player ?p2 - player 
                             ?v - victim 
                             ?room - dest ?end - sickbay)
        )

        (:task collaborate_critical_wake
                :parameters (?p1 - player ?p2 - player
                             ?v - victim
                             ?pos - start ?room - dest)
        )

        (:task call_teammate
                :parameters (?p1 - player ?p2 - player
                             ?pos - start ?room - dest)
        )

        (:task megaTask
                :parameters (?p1 - player ?p2 - player
                             ?v - victim
                             ?rocks - rubble
                             ?pos - start ?room - dest ?end - sickbay)
        )

        (:method megaMethod
                :parameters (?p1 - player ?p2 - player
                             ?v - victim
                             ?rocks - rubble
                             ?pos - start ?room - dest ?end - sickbay)
                :task (megaTask ?p1 ?p2 ?v ?rocks ?pos ?room ?end)
                :precondition (lost ?p2)
                :ordered-subtasks (and
                   (call_teammate ?p1 ?p2 ?pos ?room)
                   (clearing_room ?p2 ?rocks ?room)
                   (collaborate_critical_wake ?p1 ?p2 ?v ?pos ?room)
		   (collaborate_carry_stabilized ?p1 ?p2 ?v ?room ?end)
                   (declare_room_clean ?v ?room))
        )

        (:method m_clear_one_room
                :parameters (?p2 - player
                            ?rocks - rubble
                            ?room - dest)
                :task (clearing_room ?p2 ?rocks ?room)
                :precondition (and (blocked ?room)
                                   (present ?rocks ?room))
                :ordered-subtasks (and
                        (see_rubble ?p2 ?rocks ?room)
                        (clear_room_rubble ?p2 ?rocks ?room))
        )

        (:method m_come_wake_critical_768
                :parameters (?p1 - player ?p2 - player
                              ?v - victim
                             ?pos - start ?room - dest)
                :task (collaborate_critical_wake ?p1 ?p2 ?v ?pos ?room)
                :precondition (not (healed ?v))
                :ordered-subtasks (and 
                        (locate_critical ?p1 ?v ?room)
                        (gather_teammate ?p1 ?p2 ?pos ?room)
                        (wake_critical ?p1 ?p2 ?v ?room))
        )

        (:method m_carry_unmarked_stabilized_1234
                :parameters (?p1 - player ?p2 - player
                             ?v - victim 
                             ?room - dest ?end - sickbay)
                :task (collaborate_carry_stabilized ?p1 ?p2 ?v ?room ?end)
                :precondition (and (healed ?v)
                                   (unmarked ?v))
                :ordered-subtasks (and 
                         (find_victim ?p1 ?v ?room)
                         (mark_victim ?p1 ?v ?room)
                         (select_vic_to_carry ?p1 ?v ?room)
                         (carry_stabilized ?p2 ?v ?room ?end)) 
        )

        (:method m_carry_stabilized4
                :parameters (?p1 - player 
                             ?p2 - player
                             ?v - victim 
                             ?room - dest ?end - sickbay)
                :task (collaborate_carry_stabilized ?p1 ?p2 ?v ?room ?end)
                :precondition (and (marked ?v) 
                                   (healed ?v))
                :ordered-subtasks (and 
                         (select_vic_to_carry ?p1 ?v ?room)
                         (carry_stabilized ?p2 ?v ?room ?end)) 
        )

        (:method m_collaborate_team_56
                :parameters(?p1 - player ?p2 - player
                            ?pos - start ?room - dest)
                :task (call_teammate ?p1 ?p2 ?pos ?room)
                :precondition (lost ?p2)
                :ordered-subtasks (and 
                         (locate_teammate ?p1 ?p2 ?pos ?room)
                         (gather_teammate ?p1 ?p2 ?pos ?room))
        )

        (:action find_victim
                :parameters (?p1 - player
                             ?v - victim
                             ?room - dest)
                :precondition (unmarked ?v)
                :effect (and (in ?v ?room)
                             (at ?p1 ?room))
        )

        (:action select_vic_to_carry
                :parameters (?p1 - player 
                             ?v - victim 
                             ?room - dest)
                :precondition (and (marked ?v)
                                   (healed ?v))
                :effect (and (can_be_carried ?v)
                             (in ?v ?room)
                             (not (lost ?p1))
                             (at ?p1 ?room))
        )

        (:action locate_teammate
                :parameters (?p1 - player ?p2 - player
                             ?pos - start ?room - dest)
                :precondition (lost ?p2)
                :effect (and (at ?p2 ?pos)
                             (at ?p1 ?room)
                             (not (lost ?p2)))
        ; the logic is that if asked, they are in different areas
        )

        (:action locate_critical
                :parameters (?p1 - player 
                             ?v - victim
                             ?room - dest)
                :precondition (and (not (healed ?v))
                                   (in ?v ?room))
                :effect (at ?p1 ?room)
        )

        (:action wake_critical
                :parameters (?p1 - player ?p2 - player
                             ?v - victim
                             ?room - dest)
                :precondition (and (not (healed ?v))
                                   (in ?v ?room)
                                   (at ?p1 ?room)
                                   (at ?p2 ?room))
                :effect (healed ?v)
        )

;---------------------------------------------------------
; Actions that require room_change

        (:action gather_teammate
                :parameters (?p1 - player ?p2 - player
                             ?room - dest)
                :precondition (and (at ?p1 ?room)
                                   (free ?p2))
                :effect (and (at ?p2 ?room)
                             (not (free ?p2)))
        )

       (:action approach_victim_to_wake
                :parameters (?v - victim ?p1 - player
                             ?room - dest)
                :precondition (and (critical ?v)
                                   (in ?v ?room)
                                   (free ?p1))
                :effect (and (not (free ?p1))
                             (at ?p1 ?room))
       )
;---------------------------------------------------------
; Actions that require room_change or end in free to leave.

        (:action heal_victim
                :parameters (?p1 - player ?v - victim
                             ?room - dest)
                :precondition (and (at ?p1 ?room)
                                   (in ?v ?room))
                :effect (and (healed ?v)
                             (free ?p1)
                             (not (at ?p1 ?room)))
        )    

        (:action mark_victim
                :parameters (?p1 - player
                             ?v - victim
                             ?room - dest)
                :precondition (and (in ?v ?room) (at ?p1 ?room))
                :effect (and (marked ?v)
                             (not (at ?p1 ?room))
                             (free ?p1))
        )

        (:action flag_room
                :parameters (?p1 - player
                             ?room - dest)
                :precondition (at ?p1 ?room)
                :effect (and (free ?p1)
                             (flagged ?room)
                             (not (at ?p1 ?room)))
        )

        (:action break_rubble
          ; for one pile at a time. Does not clear room.
                :parameters (?p1 - player
                             ?rocks - rubble
                             ?room - dest)
                :precondition (and (at ?p1 ?room)
                                   (blocked ?room)
                                   (present ?rocks ?room))
                :effect (not (present ?rocks ?room))
        )

        (:action clear_rubble_room
          ; for more than one pile. Clears room of all rubble.
                :parameters (?p1 - player
                             ?rocks - rubble
                             ?room - dest)
                :precondition (and (at ?p1 ?room)
                                   (blocked ?room))
                :effect (and (not (present ?rocks ?room))
                             (not (at ?p1 ?room))
                             (free ?p1))
        ) 

        (:action carry_stabilized
           ; carry rescued/healed victim
                :parameters (?p1 - player 
                             ?v - victim 
                             ?room - dest ?end - sickbay)
                :precondition (and (healed ?v)
                                   (marked ?v)
                                   (can_be_carried ?v)
                                   (in ?v ?room)
                                   (at ?p1 ?room))
                :effect (and (in ?v ?end) 
                             (rescued ?v)
                             (not (in ?v ?room))
                             (free ?p1)
                             (not (at ?p2 ?room)))
        )

        (:action carry_victim
          ; when unhealed victims are carried
                :parameters (?v - victim ?p1 - player
                            ?pos - start ?room - dest)
                :precondition (and (at ?p1 ?pos)
                                   (in ?v ?pos))
                :effect (and (at ?p1 ?room)
                             (in ?v ?room)
                             (not (at ?p1 ?pos))
                             (not (in ?v ?pos)))
       )


       (:action wake_critical_action
          ; assumes p1 is the medic and p2 is free to leave.
                :parameters (?v - victim
                             ?p1 - player ?p2 - player
                             ?room - dest)
                :precondition (and (at ?p1 ?room)
                                   (at ?p2 ?room)
                                   (critical ?v)
                                   (in ?v ?room))
                :effect (and (not (critical ?v))
                             (free ?p2)
                             (not (at ?p2 ?room)))
       ) ; assumes p1 is the medic and p2 is free to leave.
);end define domain



